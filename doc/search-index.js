var N=null,E="",T="t",U="u",searchIndex={};
var R=["Creates a new iterator over the buckets in the slice…","Creates a new iterator over the values in the slice passed…","index","indexhasherbuilder","max_load","growth_policy","usize","values","valuesmut","itermut","Creates an empty `Index` with specified capacity and…","try_from","try_into","borrow_mut","index::hash","to_owned","clone_into","result","type_id","index::iter","borrow","typeid","into_iter","parameters","option","indexhasher","formatter","Parameters","IndexHasher","ValuesMut","IndexHasherBuilder"];

searchIndex["index"]={"doc":"Practice implementation of a hash table.","i":[[3,R[27],R[2],"Parameters needed in the configuration of an [`Index`]…",N,N],[12,R[4],E,"Maximum load factor accepted before the table is resized.…",0,N],[12,R[5],E,"Ratio by which the table's capacity is grown. Default is…",0,N],[12,"hasher_builder",E,"Hasher builder (see [`BuildHasher`]). Default is…",0,N],[12,"probe",E,"Open addressing probing policy. Default is quadratic…",0,N],[3,"Index",E,"Simple implementation of a hash table using safe-rust.",N,N],[0,"hash",E,"Module implementing a simple FNV Hasher and related…",N,N],[3,R[28],R[14],"Simple hasher using the 64-bit FNV-1 hash function with…",N,N],[3,R[30],E,"Builder for [`IndexHasher`].",N,N],[5,"make_hash",E,"Hashes a `value` using a specified `hasher_builder`.",N,[[["k"]],["u64"]]],[11,"new",E,E,1,[[],[R[25]]]],[0,"iter",R[2],"Module implementing various iterators needed by an…",N,N],[3,"Iter",R[19],"Iterator over the entries of an [`Index`] hash table.",N,N],[3,"IterMut",E,"Mutable iterator over the entries of an [`Index`] hash…",N,N],[3,"Keys",E,"Iterator over the keys of an [`Index`] hash table.",N,N],[3,"Values",E,"Iterator over the values of an [`Index`] hash table.",N,N],[3,R[29],E,"Mutable iterator over the values of an [`Index`] hash table.",N,N],[3,"Drain",E,"Iterator taking ownership of the entries of an [`Index`]…",N,N],[11,"new",E,R[0],2,[[],["iter"]]],[11,"new",E,R[0],3,[[],[R[9]]]],[11,"new",E,"Creates a new iterator over the keys in the slice passed…",4,[[],["keys"]]],[11,"new",E,R[1],5,[[],[R[7]]]],[11,"new",E,R[1],6,[[],[R[8]]]],[11,"new",E,R[1],7,[[[R[6]]],["drain"]]],[6,"Bucket",R[2],"Alias for handling buckets.",N,N],[11,"new",E,"Creates an empty `Index` with default initial capacity and…",8,[[],[[R[3]],[R[2],[R[3]]]]]],[11,"with_capacity",E,R[10],8,[[[R[6]]],[[R[3]],[R[2],[R[3]]]]]],[11,R[4],E,"Returns the maximum load factor accepted before the table…",8,[[["self"]],["f64"]]],[11,R[5],E,"Returns the ratio by which the table's capacity is grown.",8,[[["self"]],["f64"]]],[11,"hasher",E,"Returns a reference to the hasher builder used in the…",8,[[["self"]],["s"]]],[11,"probe",E,"Returns the probing function pointer of the `Index`.",8,[[["self"]]]],[11,"capacity",E,"Returns the capacity of the `Index`.",8,[[["self"]],[R[6]]]],[11,"len",E,"Returns the number of elements in the `Index`.",8,[[["self"]],[R[6]]]],[11,"is_empty",E,"Returns `true` if the `Index` contains no elements.",8,[[["self"]],["bool"]]],[11,"load",E,"Returns the current load factor of the `Index`.",8,[[["self"]],["f64"]]],[11,"clear",E,"Clear the `Index`, replacing all entries with empty buckets.",8,[[["self"]]]],[11,"keys",E,"Returns an iterator over the keys of the `Index`. The…",8,[[["self"]],["keys"]]],[11,R[7],E,"Returns an iterator over the values of the `Index`. The…",8,[[["self"]],[R[7]]]],[11,"values_mut",E,"Returns a mutable iterator over the values of the `Index`.…",8,[[["self"]],[R[8]]]],[11,"iter",E,"Return an iterator over the key-value pairs of the…",8,[[["self"]],["iter"]]],[11,"iter_mut",E,"Return a mutable iterator over the key-value pairs of the…",8,[[["self"]],[R[9]]]],[11,"drain",E,"Returns iterator taking ownership and moving out the…",8,[[["self"]],["drain"]]],[11,"with_capacity_and_parameters",E,R[10],8,[[[R[23]],[R[6]]],[R[2]]]],[11,"insert",E,"Inserts key-value pair in the `Index`.",8,[[["self"],["k"],["v"]],["bucket"]]],[11,"get",E,"Returns a reference to the value associated with the…",8,[[["self"],["q"]],[[R[24],["ref"]],["ref"]]]],[11,"get_mut",E,"Returns a mutable reference to the value associated with…",8,[[["self"],["q"]],[["refmut"],[R[24],["refmut"]]]]],[11,"get_pair",E,"Returns a reference to the key-value pair associated with…",8,[[["self"],["q"]],[["ref"],[R[24],["ref"]]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[11],E,E,0,[[[U]],[R[17]]]],[11,R[12],E,E,0,[[],[R[17]]]],[11,R[13],E,E,0,[[["self"]],[T]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[R[21]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[11],E,E,8,[[[U]],[R[17]]]],[11,R[12],E,E,8,[[],[R[17]]]],[11,R[13],E,E,8,[[["self"]],[T]]],[11,R[20],E,E,8,[[["self"]],[T]]],[11,R[18],E,E,8,[[["self"]],[R[21]]]],[11,"from",R[14],E,1,[[[T]],[T]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,R[11],E,E,1,[[[U]],[R[17]]]],[11,R[12],E,E,1,[[],[R[17]]]],[11,R[13],E,E,1,[[["self"]],[T]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[R[21]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[15],E,E,9,[[["self"]],[T]]],[11,R[16],E,E,9,[[["self"],[T]]]],[11,"into",E,E,9,[[],[U]]],[11,R[11],E,E,9,[[[U]],[R[17]]]],[11,R[12],E,E,9,[[],[R[17]]]],[11,R[13],E,E,9,[[["self"]],[T]]],[11,R[20],E,E,9,[[["self"]],[T]]],[11,R[18],E,E,9,[[["self"]],[R[21]]]],[11,R[22],R[19],E,2,[[],["i"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[11],E,E,2,[[[U]],[R[17]]]],[11,R[12],E,E,2,[[],[R[17]]]],[11,R[13],E,E,2,[[["self"]],[T]]],[11,R[20],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],[R[21]]]],[11,R[22],E,E,3,[[],["i"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[11],E,E,3,[[[U]],[R[17]]]],[11,R[12],E,E,3,[[],[R[17]]]],[11,R[13],E,E,3,[[["self"]],[T]]],[11,R[20],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[["self"]],[R[21]]]],[11,R[22],E,E,4,[[],["i"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[11],E,E,4,[[[U]],[R[17]]]],[11,R[12],E,E,4,[[],[R[17]]]],[11,R[13],E,E,4,[[["self"]],[T]]],[11,R[20],E,E,4,[[["self"]],[T]]],[11,R[18],E,E,4,[[["self"]],[R[21]]]],[11,R[22],E,E,5,[[],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[11],E,E,5,[[[U]],[R[17]]]],[11,R[12],E,E,5,[[],[R[17]]]],[11,R[13],E,E,5,[[["self"]],[T]]],[11,R[20],E,E,5,[[["self"]],[T]]],[11,R[18],E,E,5,[[["self"]],[R[21]]]],[11,R[22],E,E,6,[[],["i"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[11],E,E,6,[[[U]],[R[17]]]],[11,R[12],E,E,6,[[],[R[17]]]],[11,R[13],E,E,6,[[["self"]],[T]]],[11,R[20],E,E,6,[[["self"]],[T]]],[11,R[18],E,E,6,[[["self"]],[R[21]]]],[11,R[22],E,E,7,[[],["i"]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[11],E,E,7,[[[U]],[R[17]]]],[11,R[12],E,E,7,[[],[R[17]]]],[11,R[13],E,E,7,[[["self"]],[T]]],[11,R[20],E,E,7,[[["self"]],[T]]],[11,R[18],E,E,7,[[["self"]],[R[21]]]],[11,"default",R[14],E,1,[[],["self"]]],[11,"default",R[2],E,8,[[],["self"]]],[11,"clone",R[14],E,1,[[["self"]],["self"]]],[11,"clone",E,E,9,[[["self"]],[R[3]]]],[11,"clone",R[2],E,0,[[["self"]],[R[23]]]],[11,"next",R[19],E,2,[[["self"]],[R[24]]]],[11,"next",E,E,3,[[["self"]],[R[24]]]],[11,"next",E,E,4,[[["self"]],[R[24]]]],[11,"next",E,E,5,[[["self"]],[R[24]]]],[11,"next",E,E,6,[[["self"]],[R[24]]]],[11,"next",E,E,7,[[["self"]],[R[24]]]],[11,"write",R[14],E,1,[[["self"]]]],[11,"finish",E,E,1,[[["self"]],["u64"]]],[11,"build_hasher",E,E,9,[[["self"]],[R[25]]]],[11,"fmt",E,E,1,[[["self"],[R[26]]],[R[17]]]],[11,"fmt",E,E,9,[[["self"],[R[26]]],[R[17]]]],[11,"fmt",R[2],E,0,[[["self"],[R[26]]],[R[17]]]],[11,"fmt",E,E,8,[[["self"],[R[26]]],[R[17]]]]],"p":[[3,R[27]],[3,R[28]],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,R[29]],[3,"Drain"],[3,"Index"],[3,R[30]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);